# age_manipulation_api.py

from flask import Blueprint, request, send_file, jsonify
import io
import os
import traceback
from PIL import Image
import torch
from argparse import Namespace
import torchvision.transforms as transforms

from SAM.models.psp import pSp
from datasets.augmentations import AgeTransformer
from utils.common import tensor2im
from scripts.align_all_parallel import align_face
import dlib

age_manipulation_bp = Blueprint('age_manipulation', __name__)

# üì¶ Model y√ºkleme
EXPERIMENT_TYPE = 'ffhq_aging'
MODEL_PATH = './pretrained_models/sam_ffhq_aging.pt'
ckpt = torch.load(MODEL_PATH, map_location='cpu')
opts = ckpt['opts']
opts['checkpoint_path'] = MODEL_PATH
opts['device'] = 'cpu'
opts = Namespace(**opts)

device = 'cuda' if torch.cuda.is_available() else 'cpu'
net = pSp(opts).to(device).eval()

print("‚úÖ Age Manipulation modeli y√ºklendi.")

# üìç Face alignment i√ßin predictor
predictor_path = './pretrained_models/shape_predictor_68_face_landmarks.dat'
if not os.path.exists(predictor_path):
    raise FileNotFoundError("shape_predictor_68_face_landmarks.dat eksik.")
predictor = dlib.shape_predictor(predictor_path)

@age_manipulation_bp.route('/age-manipulation', methods=['POST'])
def age_manipulation():
    try:
        print("ƒ∞stek alƒ±ndƒ±.")

        file = request.files['image']
        target_age = int(request.form['target_age'])

        original_image = Image.open(file.stream).convert("RGB")
        image_path = "./temp_input.jpg"
        original_image.save(image_path)

        aligned_image = align_face(filepath=image_path, predictor=predictor)
        print("Alignment tamamlandƒ±. Boyut:", aligned_image.size)

        img_transforms = transforms.Compose([
            transforms.Resize((256, 256)),
            transforms.ToTensor(),
            transforms.Normalize([0.5]*3, [0.5]*3)
        ])
        input_image = img_transforms(aligned_image)

        age_transformer = AgeTransformer(target_age=target_age)
        input_image_age = [age_transformer(input_image.cpu()).to(device)]
        input_image_age = torch.stack(input_image_age)

        with torch.no_grad():
            result_tensor = net(input_image_age.float(), randomize_noise=False, resize=False)[0]
            result_image = tensor2im(result_tensor)

        output_buffer = io.BytesIO()
        result_image.save(output_buffer, format='JPEG', quality=95)
        output_buffer.seek(0)
        return send_file(output_buffer, mimetype='image/jpeg')

    except Exception as e:
        print("Hata:", str(e))
        traceback.print_exc()
        return jsonify({'error': str(e)}), 500
